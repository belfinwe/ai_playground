from block_pydantic import Square, Rectangle, SquareWall, RectangleWall

"""
The pydantic objects has up three axis. All of them are as seem from the side. 
That is, the Y axis is the height of the blocks, while X and Z are the width and depth.
"""


def calculate_wall_blocks(side_length, height, corners_placed=True):
    """Generated by ChatGPT"""
    blocks_per_side = side_length - 2
    total_blocks = blocks_per_side * 4 * height
    if not corners_placed:
        total_blocks += 4 * height
    return total_blocks

def __convert_to_wall(_data: Square|Rectangle) -> SquareWall|RectangleWall:
    if isinstance(_data, SquareWall|RectangleWall):
         return _data

    _new_content = {**_data.dict(), "y_axis": 1}
    if isinstance(_data, Square):
        return SquareWall(**_new_content)
    else:
        return RectangleWall(**_new_content)


def calc_square_wall(_data: SquareWall) -> int|float:
    base_blocks = ((_data.x_axis - 2) * 4) + 4
    print(f"test_base: {base_blocks}")
    height_blocks = base_blocks * _data.y_axis
    return height_blocks


def calc_rectangle_wall(_data: RectangleWall) -> int|float:
    base_blocks = (_data.x_axis * 2) + ((_data.z_axis - 2) * 2)
    print(f"test_base: {base_blocks}")
    height_blocks = base_blocks * _data.y_axis
    return height_blocks
    
    
def calculate_wall_blocks(wall_obj: Square|Rectangle|SquareWall|RectangleWall) -> int|float:
        wall_obj = __convert_to_wall(wall_obj)
        print(f"After conversion: {wall_obj=}")

        if isinstance(wall_obj, SquareWall):
             return calc_square_wall(wall_obj)
        return calc_rectangle_wall(wall_obj)    
        

'''
def calculate_wall_blocks_pydantic(shape: Square | Rectangle, height: int, corners_placed: bool = True) -> int:
    """Functions generated by ChatGPT, modified the other one it generated."""
    side_length = shape.x_axis if isinstance(shape, Square) else shape.x_axis + shape.y_axis
    blocks_per_side = side_length - 2
    total_blocks = blocks_per_side * 4 * height
    if not corners_placed:
        total_blocks += 4 * height
    return total_blocks
'''

if __name__ == "__main__":
    sq_d = {"x_axis": 9}
    sqw_d = {"x_axis": 8, "y_axis": 5}
    sq = Square(**sq_d)
    sqw = SquareWall(**sqw_d)

    print(f"{sq=}")
    print(f"{sqw=}")

    print(calculate_wall_blocks(sq))
    print(calculate_wall_blocks(sqw))

    rec_d = {"x_axis": 9, "z_axis": 7}
    recw_d = {"x_axis": 9, "z_axis": 7, "y_axis": 7}
    rec = Rectangle(**rec_d)
    recw = RectangleWall(**recw_d)

    print(f"{rec=}")
    print(f"{recw=}")

    print(calculate_wall_blocks(rec))
    print(calculate_wall_blocks(recw))